/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PluginsCellSelectionImport } from './routes/plugins/cell-selection'
import { Route as GettingStartedInstallationImport } from './routes/getting-started/installation'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PluginsCellSelectionRoute = PluginsCellSelectionImport.update({
  id: '/plugins/cell-selection',
  path: '/plugins/cell-selection',
  getParentRoute: () => rootRoute,
} as any)

const GettingStartedInstallationRoute = GettingStartedInstallationImport.update(
  {
    id: '/getting-started/installation',
    path: '/getting-started/installation',
    getParentRoute: () => rootRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/getting-started/installation': {
      id: '/getting-started/installation'
      path: '/getting-started/installation'
      fullPath: '/getting-started/installation'
      preLoaderRoute: typeof GettingStartedInstallationImport
      parentRoute: typeof rootRoute
    }
    '/plugins/cell-selection': {
      id: '/plugins/cell-selection'
      path: '/plugins/cell-selection'
      fullPath: '/plugins/cell-selection'
      preLoaderRoute: typeof PluginsCellSelectionImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/getting-started/installation': typeof GettingStartedInstallationRoute
  '/plugins/cell-selection': typeof PluginsCellSelectionRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/getting-started/installation': typeof GettingStartedInstallationRoute
  '/plugins/cell-selection': typeof PluginsCellSelectionRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/getting-started/installation': typeof GettingStartedInstallationRoute
  '/plugins/cell-selection': typeof PluginsCellSelectionRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/getting-started/installation' | '/plugins/cell-selection'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/getting-started/installation' | '/plugins/cell-selection'
  id:
    | '__root__'
    | '/'
    | '/getting-started/installation'
    | '/plugins/cell-selection'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GettingStartedInstallationRoute: typeof GettingStartedInstallationRoute
  PluginsCellSelectionRoute: typeof PluginsCellSelectionRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GettingStartedInstallationRoute: GettingStartedInstallationRoute,
  PluginsCellSelectionRoute: PluginsCellSelectionRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/getting-started/installation",
        "/plugins/cell-selection"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/getting-started/installation": {
      "filePath": "getting-started/installation.tsx"
    },
    "/plugins/cell-selection": {
      "filePath": "plugins/cell-selection.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
